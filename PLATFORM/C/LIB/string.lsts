
let cmp(l: CString, r: CString): Ord = (
   let c = strcmp( (l as U8[]), (r as U8[]) );
   if c < 0_i32 { LessThan }
   else if c > 0_i32 { GreaterThan }
   else { Equal }
);

let print(io: IO::File, x: CString): Nil = (
   while head-string(x) != 0_u8 {
      fwrite(x as U8[], 1_u64, 1_u64, stdout());
      x = tail-string(x);
   };
);

let .is-digit(base: CString): U64 = (
   if non-zero(base) {
      let r = true;
      while head-string(base) != 0_u8 && r {
         r = 48_u8 <= head-string(base) && head-string(base) <= 57_u8;
         base = tail-string(base);
      };
      r
   } else false
);

let .split(self: t, seperator: s, mk-empty: Arrow<Nil, ot>, concat: Arrow<Cons<ot,s>, ot>): Vector<ot> = (
   let out = mk-vector(type(ot), 4);
   out.push(mk-empty());
   let i = 0_u64;
   while i < self.length {
      let c = self[i];
      if c == seperator {
         out.push(mk-empty);
      } else {
         let lasti = out.length - 1;
         out[lasti] = concat(out[lasti], c);
      };
      i = i + 1;
   };
   out
);

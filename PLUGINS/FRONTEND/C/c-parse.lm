
c-type-index := (: (HashtableEq( 0_u64 0_u64 (as 0_u64 Tuple<String,U64>[]) )) HashtableEq<String,U64>);

index-c-type := λ(: s String). (: (
   (set c-type-index (.bind( c-type-index s 1_u64 )))
) Nil);

c-parse := λ(: tokens List<String>). (: (
   (while (non-zero tokens) (
      (let prev-tokens tokens)
      (if (&&( (non-zero tokens) (==( (head tokens) '__extension___s )) )) (set tokens (tail tokens)) ())
      (if (&&( (non-zero tokens) (==( (head tokens) '_Noreturn_s )) )) (set tokens (tail tokens)) ())
      (if (&&( (non-zero tokens) (==( (head tokens) '\:_s )) )) (set tokens (tail tokens)) ())
      (if (&&( (non-zero tokens) (==( (head tokens) 'typedef_s )) )) (set tokens (c-parse-typedef tokens)) ())
      (if (&&( (is( prev-tokens tokens )) (&&( (non-zero tokens) (c-is-typename(head tokens)) )) )) (set tokens (c-parse-declaration tokens)) ())
      (if (is( prev-tokens tokens )) (
         (print 'Unrecognized\sTop\sLevel\sStatement\s_s)(print (head tokens))(print '\n_s)(exit 1_u64)
      ) ())
   ))
) Nil);

c-dump-braces := λ(: tokens List<String>). (: (
   (let original-tokens tokens)
   (set tokens (tail tokens))
   (let depth 1_u64)
   (while (&&( (non-zero tokens) (>( depth 0_u64 )) )) (
      (if (==( (head tokens) '{_s )) (set depth (+( depth 1_u64 ))) ())
      (if (==( (head tokens) '}_s )) (set depth (-( depth 1_u64 ))) ())
      (set tokens (tail tokens))
   ))
   (if (>( depth 0_u64 )) (
      (print 'Inequal\sBraces\s_s)(print original-tokens)(print '\n_s)(exit 1_u64)
   ) ())
   tokens
) List<String>);

c-dump-brackets := λ(: tokens List<String>). (: (
   (let original-tokens tokens)
   (set tokens (tail tokens))
   (let depth 1_u64)
   (while (&&( (non-zero tokens) (>( depth 0_u64 )) )) (
      (if (==( (head tokens) '[_s )) (set depth (+( depth 1_u64 ))) ())
      (if (==( (head tokens) ']_s )) (set depth (-( depth 1_u64 ))) ())
      (set tokens (tail tokens))
   ))
   (if (>( depth 0_u64 )) (
      (print 'Inequal\sBrackets\s_s)(print original-tokens)(print '\n_s)(exit 1_u64)
   ) ())
   tokens
) List<String>);

c-dump-parens := λ(: tokens List<String>). (: (
   (let original-tokens tokens)
   (set tokens (tail tokens))
   (let depth 1_u64)
   (while (&&( (non-zero tokens) (>( depth 0_u64 )) )) (
      (if (==( (head tokens) '\[_s )) (set depth (+( depth 1_u64 ))) ())
      (if (==( (head tokens) '\]_s )) (set depth (-( depth 1_u64 ))) ())
      (set tokens (tail tokens))
   ))
   (if (>( depth 0_u64 )) (
      (print 'Inequal\sParentheses\s_s)(print original-tokens)(print '\n_s)(exit 1_u64)
   ) ())
   tokens
) List<String>);

c-is-ignored-type := λ(: s String). (: (
   (let r 0_u64)
   (if (==( s 'const_s )) (set r 1_u64) ())
   (if (==( s 'extern_s )) (set r 1_u64) ())
   (if (==( s 'static_s )) (set r 1_u64) ())
   (if (==( s 'volatile_s )) (set r 1_u64) ())
   (if (==( s '__extension_s )) (set r 1_u64) ())
   (if (==( s '__restrict_s )) (set r 1_u64) ())
   (if (==( s '__inline_s )) (set r 1_u64) ())
   r
) U64);

c-take-type := λ(: tokens List<String>). (: (
   (let r (: LEOF List<String>))
   (while (&&( (non-zero tokens) (c-is-typename(head tokens)) )) (
      (if (||( (==( (head tokens) '__attribute___s )) (==( (head tokens) '__asm___s )) )) (
         (set tokens (tail tokens))
         (set tokens (c-dump-parens tokens))
      ) (
         (if (||( (||( (==( (head tokens) 'struct_s )) (==( (head tokens) 'enum_s )) )) (==( (head tokens) 'union_s )) )) (
            (let compound-name (head tokens))
            (set tokens (tail tokens))
            (if (&&( (non-zero tokens) (c-is-identifier(head tokens)) )) (
               (set r (cons( compound-name (cons( (head tokens) r )) )))
               (set tokens (tail tokens))
            ) ())
            (if (&&( (non-zero tokens) (==( (head tokens) '{_s )) )) (set tokens (c-dump-braces tokens)) ())
         ) (
            (if (c-is-ignored-type(head tokens)) () (
               (set r (cons( (head tokens) r )))
            ))
            (set tokens (tail tokens))
         ))
      ))
   ))
   (Tuple( (.reverse r) tokens ))
) Tuple<List<String>,List<String>>);

c-parse-fbinder := λ(: tokens List<String>). (: (
   (let fname '_s)
   (let original-tokens tokens)
   (set tokens (tail tokens))
   (let depth 1_u64)
   (while (&&( (non-zero tokens) (>( depth 0_u64 )) )) (
      (if (==( (head tokens) '\[_s )) (set depth (+( depth 1_u64 ))) ())
      (if (==( (head tokens) '\]_s )) (set depth (-( depth 1_u64 ))) ())
      (if (&&( (&&( (==( fname '_s )) (c-is-identifier(head tokens)) )) (!=( (head tokens) '*_s )) )) (
         (set fname (head tokens))
      ) ())
      (set tokens (tail tokens))
   ))
   (if (>( depth 0_u64 )) (
      (print 'Inequal\sParentheses\s_s)(print original-tokens)(print '\n_s)(exit 1_u64)
   ) ())
   (Tuple( fname tokens ))
) Tuple<String,List<String>>);

c-parse-typedef := λ(: tokens List<String>). (: (
   (let original-tokens tokens)
   (set tokens (tail tokens)) # remove typedef token
   (if (||( (||( (==( (head tokens) 'struct_s )) (==( (head tokens) 'enum_s )) )) (==( (head tokens) 'union_s )) )) (
      (set tokens (tail tokens))
      (if (==( (head tokens) '{_s )) (
         (set tokens (c-dump-braces tokens))
      ) (
         (set tokens (tail tokens))
         (if (==( (head tokens) '{_s )) (
            (set tokens (c-dump-braces tokens))
         ) ())
      ))
   ) ())
   (while (&&( (non-zero tokens) (c-is-typename(head tokens)) )) (
      (set tokens (tail tokens))
   ))
   (if (&&( (non-zero tokens) (==( (head tokens) '\[_s )) )) (
      (let nt (c-parse-fbinder tokens))
      (index-c-type(.first nt))
      (set tokens (.second nt))
   ) ())
   (while (&&( (non-zero tokens) (==( (head tokens) '\[_s )) )) (
      (set tokens (c-dump-parens tokens))
   ))
   (if (&&( (non-zero tokens) (c-is-identifier(head tokens)) )) (
      (index-c-type(head tokens))
      (set tokens (tail tokens))
   ) ())
   (if (non-zero tokens) (
      (while (&&( (non-zero tokens) (==( (head tokens) '[_s )) )) (
         (set tokens (c-dump-brackets tokens))
      ))
      (while (&&( (non-zero tokens) (||( (==( (head tokens) '__attribute___s )) (==( (head tokens) '__asm___s )) )) )) (
         (set tokens (tail tokens))
         (if (&&( (non-zero tokens) (==( (head tokens) '\[_s )) )) (
            (set tokens (c-dump-parens tokens))
         ) ())
      ))
      (if (==( (head tokens) '\:_s )) (set tokens (tail tokens)) (
         (print 'Expected\sSemicolon\sIn\sTypedef_s)
         (c-print-token-sequence( original-tokens tokens ))
         (print '\n_s)(exit 1_u64)
      ))
   ) (
      (print 'Malformed\sTypedef\s_s)(print original-tokens)(print '\n_s)(exit 1_u64)
   ))
   tokens
) List<String>);

c-print-token-sequence := λ(: from List<String>)(: to List<String>). (: (
   (while (not(is( (head from) (head to) ))) (
      (print '\s_s)(print (head from))
      (set from (tail from))
   ))
) Nil);

c-mangle-typename := λ(: tokens List<String>). (: (
   (let rs (: LEOF List<String>))
   (let fancy 0_u64)
   (for-each (t in (cons( 'C_s tokens ))) (
      (set fancy (||( fancy (.contains( t '__s )) )))
      (set rs (cons(
         (.replace( t '__s '___s ))
         rs
      )))
   ))
   (let r (.join( (.reverse rs) '__s )))
   (if fancy (
      (set r (+( r '__s )))
   ) ())
   r
) String);

c-parse-declaration := λ(: tokens List<String>). (: (
   (let original-tokens tokens)
   (let rt (c-take-type tokens))
   (let return-type (c-mangle-typename(.first rt)))
   (set tokens (.second rt))
   (let name '_s)
   (if (&&( (non-zero tokens) (c-is-identifier(head tokens)) )) (
      (set name (head tokens))
      (set tokens (tail tokens))
   ) ())
   (if (&&( (==( return-type 'C_s )) (!=( name '_s )) )) (
      (if (non-zero tokens) (set tokens (tail tokens)) ())
      (print 'Unrecognized\sType\sName\s_s)(c-print-token-sequence( original-tokens tokens ))(print '\n_s)(exit 1_u64)
   ) ())
   (while (&&( (non-zero tokens) (==( (head tokens) '[_s )) )) (
      (set return-type (+( return-type '_*_s )))
      (set tokens (c-dump-brackets tokens))
   ))
   (if (&&( (non-zero tokens) (==( (head tokens) '\:_s )) )) (
   ) (
      (if (&&( (non-zero tokens) (==( (head tokens) '\[_s )) )) (
         (let return-term (App(
            (close(Lit( ':_s (token::new ':_s) )))
            (close(App(
               (close ASTNil)
               (close(AType(t1 return-type)))
            )))
         )))
         (set tokens (tail tokens))
         (let arg-types (: LEOF List<String>))
         (let arg-term ASTNil)
         (while (&&( (non-zero tokens) (!=( (head tokens) '\]_s )) )) (
            (let prev-arg-tokens tokens)
            (let at (c-take-type tokens))
            (let arg-type (c-mangle-typename(.first at)))
            (set tokens (.second at))
            (let arg-name '_s)
            (if (==( (.length arg-type) 0_u64 )) (
               (if (non-zero tokens) (set tokens (tail tokens)) ())
               (print 'Unrecognized\sType\sName\sIn\sFunction\sArgument\s_s)
               (print return-type)(print '\s_s)(print name)(print '\s_s)
               (c-print-token-sequence( original-tokens tokens ))(print '\n_s)(exit 1_u64)
            ) ())
            (if (&&( (non-zero tokens) (c-is-identifier(head tokens)) )) ((set arg-name (head tokens)) (set tokens (tail tokens))) ())
            (while (&&( (non-zero tokens) (==( (head tokens) '\[_s )) )) (
               (set tokens (c-dump-parens tokens))
            ))
            (while (&&( (non-zero tokens) (==( (head tokens) '[_s )) )) (
               (set tokens (tail tokens)) # [
               (while (&&( (non-zero tokens) (!=( (head tokens) ']_s )) )) (
                  (set tokens (tail tokens))
               ))
               (set tokens (tail tokens)) # ]
               (if (.has-suffix( arg-type '__s )) (set arg-type (.remove-suffix( arg-type '__s ))) ())
               (set arg-type (+( arg-type '_*_s )))
            ))
            (while (&&( (non-zero tokens) (==( (head tokens) '__attribute___s )) )) (
               (set tokens (tail tokens))
               (if (&&( (non-zero tokens) (==( (head tokens) '\[_s )) )) (set tokens (c-dump-parens tokens)) ())
            ))
            (let next-arg-term (App(
               (close(Lit( ':_s (token::new ':_s) )))
               (close(App(
                  (close(Var( 'c_arg_name_s (token::new 'c_arg_name_s) )))
                  (close(AType(t1 arg-type)))
               )))
            )))
            (if (is( arg-term ASTNil )) (
               (set arg-term next-arg-term)
            ) (
               (set arg-term (App( (close arg-term) (close next-arg-term) )))
            ))
            (set arg-types (cons( arg-type arg-types )))
            (if (&&( (non-zero tokens) (==( (head tokens) ',_s )) )) (set tokens (tail tokens)) ())
            (if (is( tokens prev-arg-tokens )) (
               (print 'Stuck\sParsing\sFunction\sArgs:\s_s)
               (c-print-token-sequence( original-tokens (tail tokens) ))
               (exit 1_u64)
            ) ())
         ))
         (if (non-zero tokens) (set tokens (tail tokens)) ())
         (let possible-attributes (c-take-type tokens))
         (set tokens (.second possible-attributes))
         (if (&&( (non-zero tokens) (==( (head tokens) '{_s )) )) (set tokens (c-dump-braces tokens)) ())
         (if (&&( (non-zero tokens) (==( (head tokens) '\:_s )) )) (set tokens (tail tokens)) ())
         (let c-term (Glb( (token::new name) (close(Abs(
            (close arg-term)
            (close return-term)
            (t1 'FFI_s)
         ))) )))
         (set ast-parsed-program (+( ast-parsed-program c-term )))
         (set arg-types (.reverse arg-types))
      ) (
         (print 'Unknown\sDeclaration_s)
         (c-print-token-sequence( original-tokens (tail tokens) ))
         (exit 1_u64)
      ))
   ))
   tokens
) List<String>);

c-is-typename := λ(: s String). (: (
   (let r (.lookup( c-type-index s 0_u64 )))
   (if (==( (head-string s) 48_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 49_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 50_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 51_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 52_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 53_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 54_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 55_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 56_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 57_u8 )) (set r 1_u64) ())
   r
) U64);

c-is-identifier := λ(: s String). (: (
   (let r (.lookup( c-type-index s 0_u64 )))
   (if (==( (head-string s) 65_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 66_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 67_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 68_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 69_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 70_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 71_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 72_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 73_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 74_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 75_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 76_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 77_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 78_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 79_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 80_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 81_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 82_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 83_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 84_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 85_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 86_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 87_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 88_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 89_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 90_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 95_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 97_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 98_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 99_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 100_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 101_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 102_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 103_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 104_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 105_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 106_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 107_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 108_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 109_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 110_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 111_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 112_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 113_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 114_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 115_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 116_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 117_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 118_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 119_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 120_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 121_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 122_u8 )) (set r 1_u64) ())
   r
) U64);
